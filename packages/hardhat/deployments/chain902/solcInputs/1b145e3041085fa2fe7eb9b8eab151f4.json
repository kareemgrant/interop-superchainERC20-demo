{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Store.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Store {\n    IERC20 public token;\n    mapping(uint256 => uint256) public itemPrices;\n    mapping(uint256 => uint256) public itemStock;\n    mapping(address => uint256) public ticketsPurchased;\n\n    event ItemPurchased(address buyer, uint256 itemId, uint256 price);\n    event PurchaseAttempted(address buyer, uint256 itemId, uint256 price, uint256 buyerBalance);\n    event TransferResult(bool success);\n    event TicketPurchased(address buyer, uint256 newTotalTickets);\n\n    constructor(address _tokenAddress) {\n        token = IERC20(_tokenAddress);\n        itemPrices[1] = 10 * 10**18;\n        itemStock[1] = 1000;\n    }\n\n    function completePurchase(address buyer, uint256 itemId) external {\n        uint256 price = itemPrices[itemId];\n        uint256 buyerBalance = token.balanceOf(buyer);\n        \n        emit PurchaseAttempted(buyer, itemId, price, buyerBalance);\n        require(itemStock[itemId] > 0, \"Item out of stock\");\n        require(buyerBalance >= price, \"Insufficient balance\");\n        \n        uint256 allowance = token.allowance(buyer, address(this));\n        require(allowance >= price, \"Insufficient allowance\");\n\n        bool success = token.transferFrom(buyer, address(this), price);\n        emit TransferResult(success);\n        require(success, \"Token transfer failed\");\n\n        itemStock[itemId]--;\n        ticketsPurchased[buyer]++;\n\n        emit ItemPurchased(buyer, itemId, price);\n        emit TicketPurchased(buyer, ticketsPurchased[buyer]);\n    }\n\n    function getItemPrice(uint256 itemId) external view returns (uint256) {\n        return itemPrices[itemId];\n    }\n\n    function getItemStock(uint256 itemId) external view returns (uint256) {\n        return itemStock[itemId];\n    }\n\n    function getTicketCount(address user) external view returns (uint256) {\n        return ticketsPurchased[user];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}